// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mlagents_envs/communicator_objects/unity_rl_output.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct UnityRLOutputProto {
    // message fields
    pub agentInfos: ::std::collections::HashMap<::std::string::String, UnityRLOutputProto_ListAgentInfoProto>,
    pub side_channel: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnityRLOutputProto {
    fn default() -> &'a UnityRLOutputProto {
        <UnityRLOutputProto as ::protobuf::Message>::default_instance()
    }
}

impl UnityRLOutputProto {
    pub fn new() -> UnityRLOutputProto {
        ::std::default::Default::default()
    }

    // repeated .communicator_objects.UnityRLOutputProto.AgentInfosEntry agentInfos = 2;


    pub fn get_agentInfos(&self) -> &::std::collections::HashMap<::std::string::String, UnityRLOutputProto_ListAgentInfoProto> {
        &self.agentInfos
    }
    pub fn clear_agentInfos(&mut self) {
        self.agentInfos.clear();
    }

    // Param is passed by value, moved
    pub fn set_agentInfos(&mut self, v: ::std::collections::HashMap<::std::string::String, UnityRLOutputProto_ListAgentInfoProto>) {
        self.agentInfos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_agentInfos(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, UnityRLOutputProto_ListAgentInfoProto> {
        &mut self.agentInfos
    }

    // Take field
    pub fn take_agentInfos(&mut self) -> ::std::collections::HashMap<::std::string::String, UnityRLOutputProto_ListAgentInfoProto> {
        ::std::mem::replace(&mut self.agentInfos, ::std::collections::HashMap::new())
    }

    // bytes side_channel = 3;


    pub fn get_side_channel(&self) -> &[u8] {
        &self.side_channel
    }
    pub fn clear_side_channel(&mut self) {
        self.side_channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_side_channel(&mut self, v: ::std::vec::Vec<u8>) {
        self.side_channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_side_channel(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.side_channel
    }

    // Take field
    pub fn take_side_channel(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.side_channel, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UnityRLOutputProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLOutputProto_ListAgentInfoProto>>(wire_type, is, &mut self.agentInfos)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.side_channel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLOutputProto_ListAgentInfoProto>>(2, &self.agentInfos);
        if !self.side_channel.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.side_channel);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLOutputProto_ListAgentInfoProto>>(2, &self.agentInfos, os)?;
        if !self.side_channel.is_empty() {
            os.write_bytes(3, &self.side_channel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnityRLOutputProto {
        UnityRLOutputProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLOutputProto_ListAgentInfoProto>>(
                "agentInfos",
                |m: &UnityRLOutputProto| { &m.agentInfos },
                |m: &mut UnityRLOutputProto| { &mut m.agentInfos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "side_channel",
                |m: &UnityRLOutputProto| { &m.side_channel },
                |m: &mut UnityRLOutputProto| { &mut m.side_channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnityRLOutputProto>(
                "UnityRLOutputProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnityRLOutputProto {
        static instance: ::protobuf::rt::LazyV2<UnityRLOutputProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnityRLOutputProto::new)
    }
}

impl ::protobuf::Clear for UnityRLOutputProto {
    fn clear(&mut self) {
        self.agentInfos.clear();
        self.side_channel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnityRLOutputProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnityRLOutputProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnityRLOutputProto_ListAgentInfoProto {
    // message fields
    pub value: ::protobuf::RepeatedField<super::agent_info::AgentInfoProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnityRLOutputProto_ListAgentInfoProto {
    fn default() -> &'a UnityRLOutputProto_ListAgentInfoProto {
        <UnityRLOutputProto_ListAgentInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl UnityRLOutputProto_ListAgentInfoProto {
    pub fn new() -> UnityRLOutputProto_ListAgentInfoProto {
        ::std::default::Default::default()
    }

    // repeated .communicator_objects.AgentInfoProto value = 1;


    pub fn get_value(&self) -> &[super::agent_info::AgentInfoProto] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<super::agent_info::AgentInfoProto>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<super::agent_info::AgentInfoProto> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<super::agent_info::AgentInfoProto> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UnityRLOutputProto_ListAgentInfoProto {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnityRLOutputProto_ListAgentInfoProto {
        UnityRLOutputProto_ListAgentInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::agent_info::AgentInfoProto>>(
                "value",
                |m: &UnityRLOutputProto_ListAgentInfoProto| { &m.value },
                |m: &mut UnityRLOutputProto_ListAgentInfoProto| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnityRLOutputProto_ListAgentInfoProto>(
                "UnityRLOutputProto.ListAgentInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnityRLOutputProto_ListAgentInfoProto {
        static instance: ::protobuf::rt::LazyV2<UnityRLOutputProto_ListAgentInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnityRLOutputProto_ListAgentInfoProto::new)
    }
}

impl ::protobuf::Clear for UnityRLOutputProto_ListAgentInfoProto {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnityRLOutputProto_ListAgentInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnityRLOutputProto_ListAgentInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n8mlagents_envs/communicator_objects/unity_rl_output.proto\x12\x14commu\
    nicator_objects\x1a3mlagents_envs/communicator_objects/agent_info.proto\
    \"\xe5\x02\n\x12UnityRLOutputProto\x12X\n\nagentInfos\x18\x02\x20\x03(\
    \x0b28.communicator_objects.UnityRLOutputProto.AgentInfosEntryR\nagentIn\
    fos\x12!\n\x0cside_channel\x18\x03\x20\x01(\x0cR\x0bsideChannel\x1aP\n\
    \x12ListAgentInfoProto\x12:\n\x05value\x18\x01\x20\x03(\x0b2$.communicat\
    or_objects.AgentInfoProtoR\x05value\x1az\n\x0fAgentInfosEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12Q\n\x05value\x18\x02\x20\x01(\x0b2\
    ;.communicator_objects.UnityRLOutputProto.ListAgentInfoProtoR\x05value:\
    \x028\x01J\x04\x08\x01\x10\x02B%\xaa\x02\"Unity.MLAgents.CommunicatorObj\
    ectsJ\x87\x03\n\x06\x12\x04\0\0\x0e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\t\n\x02\x03\0\x12\x03\x02\0=\n\x08\n\x01\x08\x12\x03\x04\0?\n\t\n\x02\
    \x08%\x12\x03\x04\0?\n\x08\n\x01\x02\x12\x03\x05\0\x1d\n\n\n\x02\x04\0\
    \x12\x04\x07\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x1a\n\x0c\n\
    \x04\x04\0\x03\0\x12\x04\x08\x04\n\x05\n\x0c\n\x05\x04\0\x03\0\x01\x12\
    \x03\x08\x0c\x1e\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\t\x08*\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x04\x12\x03\t\x08\x10\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x06\x12\x03\t\x11\x1f\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\t\x20%\
    \n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\t()\n/\n\x03\x04\0\t\x12\x03\
    \x0b\x04\x0f\"#\x20deprecated\x20bool\x20global_done\x20field\n\n\x0b\n\
    \x04\x04\0\t\0\x12\x03\x0b\r\x0e\n\x0c\n\x05\x04\0\t\0\x01\x12\x03\x0b\r\
    \x0e\n\x0c\n\x05\x04\0\t\0\x02\x12\x03\x0b\r\x0e\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x0c\x043\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x04#\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0c$.\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0c12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x04\x1b\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\r\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\n\x16\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\r\x19\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
