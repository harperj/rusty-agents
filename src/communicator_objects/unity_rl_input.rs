// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mlagents_envs/communicator_objects/unity_rl_input.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct UnityRLInputProto {
    // message fields
    pub agent_actions: ::std::collections::HashMap<::std::string::String, UnityRLInputProto_ListAgentActionProto>,
    pub command: super::command::CommandProto,
    pub side_channel: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnityRLInputProto {
    fn default() -> &'a UnityRLInputProto {
        <UnityRLInputProto as ::protobuf::Message>::default_instance()
    }
}

impl UnityRLInputProto {
    pub fn new() -> UnityRLInputProto {
        ::std::default::Default::default()
    }

    // repeated .communicator_objects.UnityRLInputProto.AgentActionsEntry agent_actions = 1;


    pub fn get_agent_actions(&self) -> &::std::collections::HashMap<::std::string::String, UnityRLInputProto_ListAgentActionProto> {
        &self.agent_actions
    }
    pub fn clear_agent_actions(&mut self) {
        self.agent_actions.clear();
    }

    // Param is passed by value, moved
    pub fn set_agent_actions(&mut self, v: ::std::collections::HashMap<::std::string::String, UnityRLInputProto_ListAgentActionProto>) {
        self.agent_actions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_agent_actions(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, UnityRLInputProto_ListAgentActionProto> {
        &mut self.agent_actions
    }

    // Take field
    pub fn take_agent_actions(&mut self) -> ::std::collections::HashMap<::std::string::String, UnityRLInputProto_ListAgentActionProto> {
        ::std::mem::replace(&mut self.agent_actions, ::std::collections::HashMap::new())
    }

    // .communicator_objects.CommandProto command = 4;


    pub fn get_command(&self) -> super::command::CommandProto {
        self.command
    }
    pub fn clear_command(&mut self) {
        self.command = super::command::CommandProto::STEP;
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: super::command::CommandProto) {
        self.command = v;
    }

    // bytes side_channel = 5;


    pub fn get_side_channel(&self) -> &[u8] {
        &self.side_channel
    }
    pub fn clear_side_channel(&mut self) {
        self.side_channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_side_channel(&mut self, v: ::std::vec::Vec<u8>) {
        self.side_channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_side_channel(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.side_channel
    }

    // Take field
    pub fn take_side_channel(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.side_channel, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UnityRLInputProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLInputProto_ListAgentActionProto>>(wire_type, is, &mut self.agent_actions)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.command, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.side_channel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLInputProto_ListAgentActionProto>>(1, &self.agent_actions);
        if self.command != super::command::CommandProto::STEP {
            my_size += ::protobuf::rt::enum_size(4, self.command);
        }
        if !self.side_channel.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.side_channel);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLInputProto_ListAgentActionProto>>(1, &self.agent_actions, os)?;
        if self.command != super::command::CommandProto::STEP {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.command))?;
        }
        if !self.side_channel.is_empty() {
            os.write_bytes(5, &self.side_channel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnityRLInputProto {
        UnityRLInputProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<UnityRLInputProto_ListAgentActionProto>>(
                "agent_actions",
                |m: &UnityRLInputProto| { &m.agent_actions },
                |m: &mut UnityRLInputProto| { &mut m.agent_actions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::command::CommandProto>>(
                "command",
                |m: &UnityRLInputProto| { &m.command },
                |m: &mut UnityRLInputProto| { &mut m.command },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "side_channel",
                |m: &UnityRLInputProto| { &m.side_channel },
                |m: &mut UnityRLInputProto| { &mut m.side_channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnityRLInputProto>(
                "UnityRLInputProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnityRLInputProto {
        static instance: ::protobuf::rt::LazyV2<UnityRLInputProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnityRLInputProto::new)
    }
}

impl ::protobuf::Clear for UnityRLInputProto {
    fn clear(&mut self) {
        self.agent_actions.clear();
        self.command = super::command::CommandProto::STEP;
        self.side_channel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnityRLInputProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnityRLInputProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnityRLInputProto_ListAgentActionProto {
    // message fields
    pub value: ::protobuf::RepeatedField<super::agent_action::AgentActionProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnityRLInputProto_ListAgentActionProto {
    fn default() -> &'a UnityRLInputProto_ListAgentActionProto {
        <UnityRLInputProto_ListAgentActionProto as ::protobuf::Message>::default_instance()
    }
}

impl UnityRLInputProto_ListAgentActionProto {
    pub fn new() -> UnityRLInputProto_ListAgentActionProto {
        ::std::default::Default::default()
    }

    // repeated .communicator_objects.AgentActionProto value = 1;


    pub fn get_value(&self) -> &[super::agent_action::AgentActionProto] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<super::agent_action::AgentActionProto>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<super::agent_action::AgentActionProto> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<super::agent_action::AgentActionProto> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UnityRLInputProto_ListAgentActionProto {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnityRLInputProto_ListAgentActionProto {
        UnityRLInputProto_ListAgentActionProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::agent_action::AgentActionProto>>(
                "value",
                |m: &UnityRLInputProto_ListAgentActionProto| { &m.value },
                |m: &mut UnityRLInputProto_ListAgentActionProto| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnityRLInputProto_ListAgentActionProto>(
                "UnityRLInputProto.ListAgentActionProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnityRLInputProto_ListAgentActionProto {
        static instance: ::protobuf::rt::LazyV2<UnityRLInputProto_ListAgentActionProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnityRLInputProto_ListAgentActionProto::new)
    }
}

impl ::protobuf::Clear for UnityRLInputProto_ListAgentActionProto {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnityRLInputProto_ListAgentActionProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnityRLInputProto_ListAgentActionProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n7mlagents_envs/communicator_objects/unity_rl_input.proto\x12\x14commun\
    icator_objects\x1a5mlagents_envs/communicator_objects/agent_action.proto\
    \x1a0mlagents_envs/communicator_objects/command.proto\"\xb5\x03\n\x11Uni\
    tyRLInputProto\x12^\n\ragent_actions\x18\x01\x20\x03(\x0b29.communicator\
    _objects.UnityRLInputProto.AgentActionsEntryR\x0cagentActions\x12<\n\x07\
    command\x18\x04\x20\x01(\x0e2\".communicator_objects.CommandProtoR\x07co\
    mmand\x12!\n\x0cside_channel\x18\x05\x20\x01(\x0cR\x0bsideChannel\x1aT\n\
    \x14ListAgentActionProto\x12<\n\x05value\x18\x01\x20\x03(\x0b2&.communic\
    ator_objects.AgentActionProtoR\x05value\x1a}\n\x11AgentActionsEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12R\n\x05value\x18\x02\x20\x01\
    (\x0b2<.communicator_objects.UnityRLInputProto.ListAgentActionProtoR\x05\
    value:\x028\x01J\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04B%\xaa\x02\"Uni\
    ty.MLAgents.CommunicatorObjectsJ\x90\x04\n\x06\x12\x04\0\0\x11\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0?\n\t\n\x02\x03\
    \x01\x12\x03\x03\0:\n\x08\n\x01\x08\x12\x03\x05\0?\n\t\n\x02\x08%\x12\
    \x03\x05\0?\n\x08\n\x01\x02\x12\x03\x06\0\x1d\n\n\n\x02\x04\0\x12\x04\
    \x08\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x19\n\x0c\n\x04\x04\0\
    \x03\0\x12\x04\t\x04\x0b\t\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\t\x0c\x20\
    \n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\n\x0c0\n\x0e\n\x07\x04\0\x03\0\x02\
    \0\x04\x12\x03\n\x0c\x14\n\x0e\n\x07\x04\0\x03\0\x02\0\x06\x12\x03\n\x15\
    %\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\n&+\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x03\x12\x03\n./\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x048\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\x0c\x04%\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0c&3\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c67\n)\n\x03\x04\0\t\
    \x12\x03\r\x04\x0f\"\x1ddeprecated\x20environment\x20proto\n\n\x0b\n\x04\
    \x04\0\t\0\x12\x03\r\r\x0e\n\x0c\n\x05\x04\0\t\0\x01\x12\x03\r\r\x0e\n\
    \x0c\n\x05\x04\0\t\0\x02\x12\x03\r\r\x0e\n\"\n\x03\x04\0\t\x12\x03\x0e\
    \x04\x0f\"\x16deprecated\x20is_trainig\n\n\x0b\n\x04\x04\0\t\x01\x12\x03\
    \x0e\r\x0e\n\x0c\n\x05\x04\0\t\x01\x01\x12\x03\x0e\r\x0e\n\x0c\n\x05\x04\
    \0\t\x01\x02\x12\x03\x0e\r\x0e\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\x04\
    \x1d\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0f\x04\x10\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x0f\x11\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x0f\x1b\x1c\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x10\x04\x1b\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x10\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x10\n\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x10\x19\x1ab\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
