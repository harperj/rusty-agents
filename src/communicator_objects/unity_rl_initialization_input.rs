// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mlagents_envs/communicator_objects/unity_rl_initialization_input.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct UnityRLInitializationInputProto {
    // message fields
    pub seed: i32,
    pub communication_version: ::std::string::String,
    pub package_version: ::std::string::String,
    pub capabilities: ::protobuf::SingularPtrField<super::capabilities::UnityRLCapabilitiesProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnityRLInitializationInputProto {
    fn default() -> &'a UnityRLInitializationInputProto {
        <UnityRLInitializationInputProto as ::protobuf::Message>::default_instance()
    }
}

impl UnityRLInitializationInputProto {
    pub fn new() -> UnityRLInitializationInputProto {
        ::std::default::Default::default()
    }

    // int32 seed = 1;


    pub fn get_seed(&self) -> i32 {
        self.seed
    }
    pub fn clear_seed(&mut self) {
        self.seed = 0;
    }

    // Param is passed by value, moved
    pub fn set_seed(&mut self, v: i32) {
        self.seed = v;
    }

    // string communication_version = 2;


    pub fn get_communication_version(&self) -> &str {
        &self.communication_version
    }
    pub fn clear_communication_version(&mut self) {
        self.communication_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_communication_version(&mut self, v: ::std::string::String) {
        self.communication_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_communication_version(&mut self) -> &mut ::std::string::String {
        &mut self.communication_version
    }

    // Take field
    pub fn take_communication_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.communication_version, ::std::string::String::new())
    }

    // string package_version = 3;


    pub fn get_package_version(&self) -> &str {
        &self.package_version
    }
    pub fn clear_package_version(&mut self) {
        self.package_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_version(&mut self, v: ::std::string::String) {
        self.package_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package_version(&mut self) -> &mut ::std::string::String {
        &mut self.package_version
    }

    // Take field
    pub fn take_package_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.package_version, ::std::string::String::new())
    }

    // .communicator_objects.UnityRLCapabilitiesProto capabilities = 4;


    pub fn get_capabilities(&self) -> &super::capabilities::UnityRLCapabilitiesProto {
        self.capabilities.as_ref().unwrap_or_else(|| <super::capabilities::UnityRLCapabilitiesProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_capabilities(&mut self) {
        self.capabilities.clear();
    }

    pub fn has_capabilities(&self) -> bool {
        self.capabilities.is_some()
    }

    // Param is passed by value, moved
    pub fn set_capabilities(&mut self, v: super::capabilities::UnityRLCapabilitiesProto) {
        self.capabilities = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_capabilities(&mut self) -> &mut super::capabilities::UnityRLCapabilitiesProto {
        if self.capabilities.is_none() {
            self.capabilities.set_default();
        }
        self.capabilities.as_mut().unwrap()
    }

    // Take field
    pub fn take_capabilities(&mut self) -> super::capabilities::UnityRLCapabilitiesProto {
        self.capabilities.take().unwrap_or_else(|| super::capabilities::UnityRLCapabilitiesProto::new())
    }
}

impl ::protobuf::Message for UnityRLInitializationInputProto {
    fn is_initialized(&self) -> bool {
        for v in &self.capabilities {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.seed = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.communication_version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.package_version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.capabilities)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seed != 0 {
            my_size += ::protobuf::rt::value_size(1, self.seed, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.communication_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.communication_version);
        }
        if !self.package_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.package_version);
        }
        if let Some(ref v) = self.capabilities.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.seed != 0 {
            os.write_int32(1, self.seed)?;
        }
        if !self.communication_version.is_empty() {
            os.write_string(2, &self.communication_version)?;
        }
        if !self.package_version.is_empty() {
            os.write_string(3, &self.package_version)?;
        }
        if let Some(ref v) = self.capabilities.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnityRLInitializationInputProto {
        UnityRLInitializationInputProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "seed",
                |m: &UnityRLInitializationInputProto| { &m.seed },
                |m: &mut UnityRLInitializationInputProto| { &mut m.seed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "communication_version",
                |m: &UnityRLInitializationInputProto| { &m.communication_version },
                |m: &mut UnityRLInitializationInputProto| { &mut m.communication_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "package_version",
                |m: &UnityRLInitializationInputProto| { &m.package_version },
                |m: &mut UnityRLInitializationInputProto| { &mut m.package_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::capabilities::UnityRLCapabilitiesProto>>(
                "capabilities",
                |m: &UnityRLInitializationInputProto| { &m.capabilities },
                |m: &mut UnityRLInitializationInputProto| { &mut m.capabilities },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnityRLInitializationInputProto>(
                "UnityRLInitializationInputProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnityRLInitializationInputProto {
        static instance: ::protobuf::rt::LazyV2<UnityRLInitializationInputProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnityRLInitializationInputProto::new)
    }
}

impl ::protobuf::Clear for UnityRLInitializationInputProto {
    fn clear(&mut self) {
        self.seed = 0;
        self.communication_version.clear();
        self.package_version.clear();
        self.capabilities.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnityRLInitializationInputProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnityRLInitializationInputProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nFmlagents_envs/communicator_objects/unity_rl_initialization_input.prot\
    o\x12\x14communicator_objects\x1a5mlagents_envs/communicator_objects/cap\
    abilities.proto\"\xe7\x01\n\x1fUnityRLInitializationInputProto\x12\x12\n\
    \x04seed\x18\x01\x20\x01(\x05R\x04seed\x123\n\x15communication_version\
    \x18\x02\x20\x01(\tR\x14communicationVersion\x12'\n\x0fpackage_version\
    \x18\x03\x20\x01(\tR\x0epackageVersion\x12R\n\x0ccapabilities\x18\x04\
    \x20\x01(\x0b2..communicator_objects.UnityRLCapabilitiesProtoR\x0ccapabi\
    litiesB%\xaa\x02\"Unity.MLAgents.CommunicatorObjectsJ\x85\x05\n\x06\x12\
    \x04\0\0\x12\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\
    \x02\0?\n\x08\n\x01\x08\x12\x03\x03\0?\n\t\n\x02\x08%\x12\x03\x03\0?\n\
    \x08\n\x01\x02\x12\x03\x04\0\x1d\np\n\x02\x04\0\x12\x04\x07\0\x12\x01\
    \x1ad\x20The\x20initializaiton\x20message\x20-\x20this\x20is\x20typicall\
    y\x20sent\x20from\x20the\x20Python\x20trainer\x20to\x20the\x20C#\x20envi\
    ronment.\n\n\n\n\x03\x04\0\x01\x12\x03\x07\x08'\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x08\x04\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x04\t\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x08\n\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x08\x11\x12\no\n\x04\x04\0\x02\x01\x12\x03\x0b\x04%\x1ab\x20Communi\
    cation\x20protocol\x20version\x20that\x20the\x20initiating\x20side\x20(t\
    ypically\x20the\x20Python\x20trainer)\x20is\x20using.\n\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x0b\x0b\x20\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b#$\nh\n\x04\x04\0\
    \x02\x02\x12\x03\x0e\x04\x1f\x1a[\x20Package/library\x20version\x20that\
    \x20the\x20initiating\x20side\x20(typically\x20the\x20Python\x20trainer)\
    \x20is\x20using.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0e\x04\n\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03\x0e\x0b\x1a\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\x0e\x1d\x1e\n9\n\x04\x04\0\x02\x03\x12\x03\x11\x04.\x1a,\
    \x20The\x20RL\x20Capabilities\x20of\x20the\x20Python\x20trainer.\n\n\x0c\
    \n\x05\x04\0\x02\x03\x06\x12\x03\x11\x04\x1c\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\x11\x1d)\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x11,-b\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
