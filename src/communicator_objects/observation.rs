// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mlagents_envs/communicator_objects/observation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct ObservationProto {
    // message fields
    pub shape: ::std::vec::Vec<i32>,
    pub compression_type: CompressionTypeProto,
    // message oneof groups
    pub observation_data: ::std::option::Option<ObservationProto_oneof_observation_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ObservationProto {
    fn default() -> &'a ObservationProto {
        <ObservationProto as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ObservationProto_oneof_observation_data {
    compressed_data(::std::vec::Vec<u8>),
    float_data(ObservationProto_FloatData),
}

impl ObservationProto {
    pub fn new() -> ObservationProto {
        ::std::default::Default::default()
    }

    // repeated int32 shape = 1;


    pub fn get_shape(&self) -> &[i32] {
        &self.shape
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: ::std::vec::Vec<i32>) {
        self.shape = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shape(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.shape
    }

    // Take field
    pub fn take_shape(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.shape, ::std::vec::Vec::new())
    }

    // .communicator_objects.CompressionTypeProto compression_type = 2;


    pub fn get_compression_type(&self) -> CompressionTypeProto {
        self.compression_type
    }
    pub fn clear_compression_type(&mut self) {
        self.compression_type = CompressionTypeProto::NONE;
    }

    // Param is passed by value, moved
    pub fn set_compression_type(&mut self, v: CompressionTypeProto) {
        self.compression_type = v;
    }

    // bytes compressed_data = 3;


    pub fn get_compressed_data(&self) -> &[u8] {
        match self.observation_data {
            ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_compressed_data(&mut self) {
        self.observation_data = ::std::option::Option::None;
    }

    pub fn has_compressed_data(&self) -> bool {
        match self.observation_data {
            ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_compressed_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.observation_data = ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_compressed_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(_)) = self.observation_data {
        } else {
            self.observation_data = ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(::std::vec::Vec::new()));
        }
        match self.observation_data {
            ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_compressed_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_compressed_data() {
            match self.observation_data.take() {
                ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .communicator_objects.ObservationProto.FloatData float_data = 4;


    pub fn get_float_data(&self) -> &ObservationProto_FloatData {
        match self.observation_data {
            ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(ref v)) => v,
            _ => <ObservationProto_FloatData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_float_data(&mut self) {
        self.observation_data = ::std::option::Option::None;
    }

    pub fn has_float_data(&self) -> bool {
        match self.observation_data {
            ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float_data(&mut self, v: ObservationProto_FloatData) {
        self.observation_data = ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_float_data(&mut self) -> &mut ObservationProto_FloatData {
        if let ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(_)) = self.observation_data {
        } else {
            self.observation_data = ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(ObservationProto_FloatData::new()));
        }
        match self.observation_data {
            ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_float_data(&mut self) -> ObservationProto_FloatData {
        if self.has_float_data() {
            match self.observation_data.take() {
                ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ObservationProto_FloatData::new()
        }
    }
}

impl ::protobuf::Message for ObservationProto {
    fn is_initialized(&self) -> bool {
        if let Some(ObservationProto_oneof_observation_data::float_data(ref v)) = self.observation_data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.shape)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.compression_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.observation_data = ::std::option::Option::Some(ObservationProto_oneof_observation_data::compressed_data(is.read_bytes()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.observation_data = ::std::option::Option::Some(ObservationProto_oneof_observation_data::float_data(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.shape {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.compression_type != CompressionTypeProto::NONE {
            my_size += ::protobuf::rt::enum_size(2, self.compression_type);
        }
        if let ::std::option::Option::Some(ref v) = self.observation_data {
            match v {
                &ObservationProto_oneof_observation_data::compressed_data(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
                &ObservationProto_oneof_observation_data::float_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.shape {
            os.write_int32(1, *v)?;
        };
        if self.compression_type != CompressionTypeProto::NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.compression_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.observation_data {
            match v {
                &ObservationProto_oneof_observation_data::compressed_data(ref v) => {
                    os.write_bytes(3, v)?;
                },
                &ObservationProto_oneof_observation_data::float_data(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ObservationProto {
        ObservationProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "shape",
                |m: &ObservationProto| { &m.shape },
                |m: &mut ObservationProto| { &mut m.shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CompressionTypeProto>>(
                "compression_type",
                |m: &ObservationProto| { &m.compression_type },
                |m: &mut ObservationProto| { &mut m.compression_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "compressed_data",
                ObservationProto::has_compressed_data,
                ObservationProto::get_compressed_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ObservationProto_FloatData>(
                "float_data",
                ObservationProto::has_float_data,
                ObservationProto::get_float_data,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ObservationProto>(
                "ObservationProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ObservationProto {
        static instance: ::protobuf::rt::LazyV2<ObservationProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ObservationProto::new)
    }
}

impl ::protobuf::Clear for ObservationProto {
    fn clear(&mut self) {
        self.shape.clear();
        self.compression_type = CompressionTypeProto::NONE;
        self.observation_data = ::std::option::Option::None;
        self.observation_data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ObservationProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObservationProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ObservationProto_FloatData {
    // message fields
    pub data: ::std::vec::Vec<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ObservationProto_FloatData {
    fn default() -> &'a ObservationProto_FloatData {
        <ObservationProto_FloatData as ::protobuf::Message>::default_instance()
    }
}

impl ObservationProto_FloatData {
    pub fn new() -> ObservationProto_FloatData {
        ::std::default::Default::default()
    }

    // repeated float data = 1;


    pub fn get_data(&self) -> &[f32] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<f32>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ObservationProto_FloatData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += 5 * self.data.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.data {
            os.write_float(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ObservationProto_FloatData {
        ObservationProto_FloatData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "data",
                |m: &ObservationProto_FloatData| { &m.data },
                |m: &mut ObservationProto_FloatData| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ObservationProto_FloatData>(
                "ObservationProto.FloatData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ObservationProto_FloatData {
        static instance: ::protobuf::rt::LazyV2<ObservationProto_FloatData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ObservationProto_FloatData::new)
    }
}

impl ::protobuf::Clear for ObservationProto_FloatData {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ObservationProto_FloatData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObservationProto_FloatData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CompressionTypeProto {
    NONE = 0,
    PNG = 1,
}

impl ::protobuf::ProtobufEnum for CompressionTypeProto {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CompressionTypeProto> {
        match value {
            0 => ::std::option::Option::Some(CompressionTypeProto::NONE),
            1 => ::std::option::Option::Some(CompressionTypeProto::PNG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CompressionTypeProto] = &[
            CompressionTypeProto::NONE,
            CompressionTypeProto::PNG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CompressionTypeProto>("CompressionTypeProto", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CompressionTypeProto {
}

impl ::std::default::Default for CompressionTypeProto {
    fn default() -> Self {
        CompressionTypeProto::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for CompressionTypeProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4mlagents_envs/communicator_objects/observation.proto\x12\x14communica\
    tor_objects\"\xb2\x02\n\x10ObservationProto\x12\x14\n\x05shape\x18\x01\
    \x20\x03(\x05R\x05shape\x12U\n\x10compression_type\x18\x02\x20\x01(\x0e2\
    *.communicator_objects.CompressionTypeProtoR\x0fcompressionType\x12)\n\
    \x0fcompressed_data\x18\x03\x20\x01(\x0cH\0R\x0ecompressedData\x12Q\n\nf\
    loat_data\x18\x04\x20\x01(\x0b20.communicator_objects.ObservationProto.F\
    loatDataH\0R\tfloatData\x1a\x1f\n\tFloatData\x12\x12\n\x04data\x18\x01\
    \x20\x03(\x02R\x04dataB\x12\n\x10observation_data*)\n\x14CompressionType\
    Proto\x12\x08\n\x04NONE\x10\0\x12\x07\n\x03PNG\x10\x01B%\xaa\x02\"Unity.\
    MLAgents.CommunicatorObjectsJ\xa4\x04\n\x06\x12\x04\0\0\x15\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0?\n\t\n\x02\x08%\
    \x12\x03\x02\0?\n\x08\n\x01\x02\x12\x03\x03\0\x1d\n\n\n\x02\x05\0\x12\
    \x04\x05\0\x08\x01\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x19\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\x06\x04\r\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\
    \x04\x08\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x06\x0b\x0c\n\x0b\n\x04\x05\
    \0\x02\x01\x12\x03\x07\x04\x0c\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x07\
    \x04\x07\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x07\n\x0b\n\n\n\x02\x04\0\
    \x12\x04\n\0\x15\x01\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x18\n\x0c\n\x04\
    \x04\0\x03\0\x12\x04\x0b\x04\r\x05\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\
    \x0b\x0c\x15\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\x0c\x08\x20\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x04\x12\x03\x0c\x08\x10\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x05\x12\x03\x0c\x11\x16\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x0c\
    \x17\x1b\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x0c\x1e\x1f\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x0f\x04\x1d\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x0f\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\r\x12\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0f\x13\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0f\x1b\x1c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x10\x04.\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03\x10\x04\x18\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x10\x19)\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10,-\n\x0c\n\x04\x04\0\
    \x08\0\x12\x04\x11\x04\x14\x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x11\n\
    \x1a\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x12\x08\"\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x12\x08\r\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x12\x0e\
    \x1d\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x12\x20!\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x13\x08!\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x13\x08\
    \x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x13\x12\x1c\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x13\x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
