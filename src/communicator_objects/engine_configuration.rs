// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mlagents_envs/communicator_objects/engine_configuration.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct EngineConfigurationProto {
    // message fields
    pub width: i32,
    pub height: i32,
    pub quality_level: i32,
    pub time_scale: f32,
    pub target_frame_rate: i32,
    pub show_monitor: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EngineConfigurationProto {
    fn default() -> &'a EngineConfigurationProto {
        <EngineConfigurationProto as ::protobuf::Message>::default_instance()
    }
}

impl EngineConfigurationProto {
    pub fn new() -> EngineConfigurationProto {
        ::std::default::Default::default()
    }

    // int32 width = 1;


    pub fn get_width(&self) -> i32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: i32) {
        self.width = v;
    }

    // int32 height = 2;


    pub fn get_height(&self) -> i32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i32) {
        self.height = v;
    }

    // int32 quality_level = 3;


    pub fn get_quality_level(&self) -> i32 {
        self.quality_level
    }
    pub fn clear_quality_level(&mut self) {
        self.quality_level = 0;
    }

    // Param is passed by value, moved
    pub fn set_quality_level(&mut self, v: i32) {
        self.quality_level = v;
    }

    // float time_scale = 4;


    pub fn get_time_scale(&self) -> f32 {
        self.time_scale
    }
    pub fn clear_time_scale(&mut self) {
        self.time_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_time_scale(&mut self, v: f32) {
        self.time_scale = v;
    }

    // int32 target_frame_rate = 5;


    pub fn get_target_frame_rate(&self) -> i32 {
        self.target_frame_rate
    }
    pub fn clear_target_frame_rate(&mut self) {
        self.target_frame_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_frame_rate(&mut self, v: i32) {
        self.target_frame_rate = v;
    }

    // bool show_monitor = 6;


    pub fn get_show_monitor(&self) -> bool {
        self.show_monitor
    }
    pub fn clear_show_monitor(&mut self) {
        self.show_monitor = false;
    }

    // Param is passed by value, moved
    pub fn set_show_monitor(&mut self, v: bool) {
        self.show_monitor = v;
    }
}

impl ::protobuf::Message for EngineConfigurationProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.width = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.quality_level = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.time_scale = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.target_frame_rate = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_monitor = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(1, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.quality_level != 0 {
            my_size += ::protobuf::rt::value_size(3, self.quality_level, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time_scale != 0. {
            my_size += 5;
        }
        if self.target_frame_rate != 0 {
            my_size += ::protobuf::rt::value_size(5, self.target_frame_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.show_monitor != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.width != 0 {
            os.write_int32(1, self.width)?;
        }
        if self.height != 0 {
            os.write_int32(2, self.height)?;
        }
        if self.quality_level != 0 {
            os.write_int32(3, self.quality_level)?;
        }
        if self.time_scale != 0. {
            os.write_float(4, self.time_scale)?;
        }
        if self.target_frame_rate != 0 {
            os.write_int32(5, self.target_frame_rate)?;
        }
        if self.show_monitor != false {
            os.write_bool(6, self.show_monitor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EngineConfigurationProto {
        EngineConfigurationProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "width",
                |m: &EngineConfigurationProto| { &m.width },
                |m: &mut EngineConfigurationProto| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "height",
                |m: &EngineConfigurationProto| { &m.height },
                |m: &mut EngineConfigurationProto| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "quality_level",
                |m: &EngineConfigurationProto| { &m.quality_level },
                |m: &mut EngineConfigurationProto| { &mut m.quality_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "time_scale",
                |m: &EngineConfigurationProto| { &m.time_scale },
                |m: &mut EngineConfigurationProto| { &mut m.time_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "target_frame_rate",
                |m: &EngineConfigurationProto| { &m.target_frame_rate },
                |m: &mut EngineConfigurationProto| { &mut m.target_frame_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_monitor",
                |m: &EngineConfigurationProto| { &m.show_monitor },
                |m: &mut EngineConfigurationProto| { &mut m.show_monitor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EngineConfigurationProto>(
                "EngineConfigurationProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EngineConfigurationProto {
        static instance: ::protobuf::rt::LazyV2<EngineConfigurationProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EngineConfigurationProto::new)
    }
}

impl ::protobuf::Clear for EngineConfigurationProto {
    fn clear(&mut self) {
        self.width = 0;
        self.height = 0;
        self.quality_level = 0;
        self.time_scale = 0.;
        self.target_frame_rate = 0;
        self.show_monitor = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EngineConfigurationProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EngineConfigurationProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=mlagents_envs/communicator_objects/engine_configuration.proto\x12\x14\
    communicator_objects\"\xdb\x01\n\x18EngineConfigurationProto\x12\x14\n\
    \x05width\x18\x01\x20\x01(\x05R\x05width\x12\x16\n\x06height\x18\x02\x20\
    \x01(\x05R\x06height\x12#\n\rquality_level\x18\x03\x20\x01(\x05R\x0cqual\
    ityLevel\x12\x1d\n\ntime_scale\x18\x04\x20\x01(\x02R\ttimeScale\x12*\n\
    \x11target_frame_rate\x18\x05\x20\x01(\x05R\x0ftargetFrameRate\x12!\n\
    \x0cshow_monitor\x18\x06\x20\x01(\x08R\x0bshowMonitorB%\xaa\x02\"Unity.M\
    LAgents.CommunicatorObjectsJ\x93\x03\n\x06\x12\x04\0\0\x0c\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0?\n\t\n\x02\x08%\
    \x12\x03\x02\0?\n\x08\n\x01\x02\x12\x03\x03\0\x1d\n\n\n\x02\x04\0\x12\
    \x04\x05\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x20\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x06\x04\x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\
    \x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\n\x0f\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x06\x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x04\
    \x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x04\t\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x07\n\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\
    \x13\x14\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\x04\x1c\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x08\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x08\
    \n\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x08\x1a\x1b\n\x0b\n\x04\x04\
    \0\x02\x03\x12\x03\t\x04\x19\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\t\x04\
    \t\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\n\x14\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\t\x17\x18\n\x0b\n\x04\x04\0\x02\x04\x12\x03\n\x04\x20\n\
    \x0c\n\x05\x04\0\x02\x04\x05\x12\x03\n\x04\t\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\n\n\x1b\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\n\x1e\x1f\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03\x0b\x04\x1a\n\x0c\n\x05\x04\0\x02\x05\
    \x05\x12\x03\x0b\x04\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0b\t\x15\
    \n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0b\x18\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
