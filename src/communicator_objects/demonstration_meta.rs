// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mlagents_envs/communicator_objects/demonstration_meta.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct DemonstrationMetaProto {
    // message fields
    pub api_version: i32,
    pub demonstration_name: ::std::string::String,
    pub number_steps: i32,
    pub number_episodes: i32,
    pub mean_reward: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DemonstrationMetaProto {
    fn default() -> &'a DemonstrationMetaProto {
        <DemonstrationMetaProto as ::protobuf::Message>::default_instance()
    }
}

impl DemonstrationMetaProto {
    pub fn new() -> DemonstrationMetaProto {
        ::std::default::Default::default()
    }

    // int32 api_version = 1;


    pub fn get_api_version(&self) -> i32 {
        self.api_version
    }
    pub fn clear_api_version(&mut self) {
        self.api_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_api_version(&mut self, v: i32) {
        self.api_version = v;
    }

    // string demonstration_name = 2;


    pub fn get_demonstration_name(&self) -> &str {
        &self.demonstration_name
    }
    pub fn clear_demonstration_name(&mut self) {
        self.demonstration_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_demonstration_name(&mut self, v: ::std::string::String) {
        self.demonstration_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_demonstration_name(&mut self) -> &mut ::std::string::String {
        &mut self.demonstration_name
    }

    // Take field
    pub fn take_demonstration_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.demonstration_name, ::std::string::String::new())
    }

    // int32 number_steps = 3;


    pub fn get_number_steps(&self) -> i32 {
        self.number_steps
    }
    pub fn clear_number_steps(&mut self) {
        self.number_steps = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_steps(&mut self, v: i32) {
        self.number_steps = v;
    }

    // int32 number_episodes = 4;


    pub fn get_number_episodes(&self) -> i32 {
        self.number_episodes
    }
    pub fn clear_number_episodes(&mut self) {
        self.number_episodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_episodes(&mut self, v: i32) {
        self.number_episodes = v;
    }

    // float mean_reward = 5;


    pub fn get_mean_reward(&self) -> f32 {
        self.mean_reward
    }
    pub fn clear_mean_reward(&mut self) {
        self.mean_reward = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mean_reward(&mut self, v: f32) {
        self.mean_reward = v;
    }
}

impl ::protobuf::Message for DemonstrationMetaProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.api_version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.demonstration_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.number_steps = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.number_episodes = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.mean_reward = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.api_version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.api_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.demonstration_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.demonstration_name);
        }
        if self.number_steps != 0 {
            my_size += ::protobuf::rt::value_size(3, self.number_steps, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.number_episodes != 0 {
            my_size += ::protobuf::rt::value_size(4, self.number_episodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mean_reward != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.api_version != 0 {
            os.write_int32(1, self.api_version)?;
        }
        if !self.demonstration_name.is_empty() {
            os.write_string(2, &self.demonstration_name)?;
        }
        if self.number_steps != 0 {
            os.write_int32(3, self.number_steps)?;
        }
        if self.number_episodes != 0 {
            os.write_int32(4, self.number_episodes)?;
        }
        if self.mean_reward != 0. {
            os.write_float(5, self.mean_reward)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DemonstrationMetaProto {
        DemonstrationMetaProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "api_version",
                |m: &DemonstrationMetaProto| { &m.api_version },
                |m: &mut DemonstrationMetaProto| { &mut m.api_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "demonstration_name",
                |m: &DemonstrationMetaProto| { &m.demonstration_name },
                |m: &mut DemonstrationMetaProto| { &mut m.demonstration_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "number_steps",
                |m: &DemonstrationMetaProto| { &m.number_steps },
                |m: &mut DemonstrationMetaProto| { &mut m.number_steps },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "number_episodes",
                |m: &DemonstrationMetaProto| { &m.number_episodes },
                |m: &mut DemonstrationMetaProto| { &mut m.number_episodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "mean_reward",
                |m: &DemonstrationMetaProto| { &m.mean_reward },
                |m: &mut DemonstrationMetaProto| { &mut m.mean_reward },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DemonstrationMetaProto>(
                "DemonstrationMetaProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DemonstrationMetaProto {
        static instance: ::protobuf::rt::LazyV2<DemonstrationMetaProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DemonstrationMetaProto::new)
    }
}

impl ::protobuf::Clear for DemonstrationMetaProto {
    fn clear(&mut self) {
        self.api_version = 0;
        self.demonstration_name.clear();
        self.number_steps = 0;
        self.number_episodes = 0;
        self.mean_reward = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DemonstrationMetaProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DemonstrationMetaProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n;mlagents_envs/communicator_objects/demonstration_meta.proto\x12\x14co\
    mmunicator_objects\"\xd5\x01\n\x16DemonstrationMetaProto\x12\x1f\n\x0bap\
    i_version\x18\x01\x20\x01(\x05R\napiVersion\x12-\n\x12demonstration_name\
    \x18\x02\x20\x01(\tR\x11demonstrationName\x12!\n\x0cnumber_steps\x18\x03\
    \x20\x01(\x05R\x0bnumberSteps\x12'\n\x0fnumber_episodes\x18\x04\x20\x01(\
    \x05R\x0enumberEpisodes\x12\x1f\n\x0bmean_reward\x18\x05\x20\x01(\x02R\n\
    meanRewardB%\xaa\x02\"Unity.MLAgents.CommunicatorObjectsJ\xdc\x02\n\x06\
    \x12\x04\0\0\x0b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\
    \x03\x02\0?\n\t\n\x02\x08%\x12\x03\x02\0?\n\x08\n\x01\x02\x12\x03\x03\0\
    \x1d\n\n\n\x02\x04\0\x12\x04\x05\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x05\x08\x1e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\x04\x1a\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x06\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\n\
    \x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x18\x19\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x07\x04\"\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x04\
    \n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\x0b\x1d\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x07\x20!\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\x04\
    \x1b\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x08\x04\t\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x08\n\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x08\
    \x19\x1a\n\x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\x1e\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03\t\x04\t\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\n\
    \x19\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\t\x1c\x1d\n\x0b\n\x04\x04\0\
    \x02\x04\x12\x03\n\x04\x1a\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\n\x04\t\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\n\n\x15\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\n\x18\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
