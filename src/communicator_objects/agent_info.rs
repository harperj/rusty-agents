// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mlagents_envs/communicator_objects/agent_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct AgentInfoProto {
    // message fields
    pub reward: f32,
    pub done: bool,
    pub max_step_reached: bool,
    pub id: i32,
    pub action_mask: ::std::vec::Vec<bool>,
    pub observations: ::protobuf::RepeatedField<super::observation::ObservationProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AgentInfoProto {
    fn default() -> &'a AgentInfoProto {
        <AgentInfoProto as ::protobuf::Message>::default_instance()
    }
}

impl AgentInfoProto {
    pub fn new() -> AgentInfoProto {
        ::std::default::Default::default()
    }

    // float reward = 7;


    pub fn get_reward(&self) -> f32 {
        self.reward
    }
    pub fn clear_reward(&mut self) {
        self.reward = 0.;
    }

    // Param is passed by value, moved
    pub fn set_reward(&mut self, v: f32) {
        self.reward = v;
    }

    // bool done = 8;


    pub fn get_done(&self) -> bool {
        self.done
    }
    pub fn clear_done(&mut self) {
        self.done = false;
    }

    // Param is passed by value, moved
    pub fn set_done(&mut self, v: bool) {
        self.done = v;
    }

    // bool max_step_reached = 9;


    pub fn get_max_step_reached(&self) -> bool {
        self.max_step_reached
    }
    pub fn clear_max_step_reached(&mut self) {
        self.max_step_reached = false;
    }

    // Param is passed by value, moved
    pub fn set_max_step_reached(&mut self, v: bool) {
        self.max_step_reached = v;
    }

    // int32 id = 10;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // repeated bool action_mask = 11;


    pub fn get_action_mask(&self) -> &[bool] {
        &self.action_mask
    }
    pub fn clear_action_mask(&mut self) {
        self.action_mask.clear();
    }

    // Param is passed by value, moved
    pub fn set_action_mask(&mut self, v: ::std::vec::Vec<bool>) {
        self.action_mask = v;
    }

    // Mutable pointer to the field.
    pub fn mut_action_mask(&mut self) -> &mut ::std::vec::Vec<bool> {
        &mut self.action_mask
    }

    // Take field
    pub fn take_action_mask(&mut self) -> ::std::vec::Vec<bool> {
        ::std::mem::replace(&mut self.action_mask, ::std::vec::Vec::new())
    }

    // repeated .communicator_objects.ObservationProto observations = 13;


    pub fn get_observations(&self) -> &[super::observation::ObservationProto] {
        &self.observations
    }
    pub fn clear_observations(&mut self) {
        self.observations.clear();
    }

    // Param is passed by value, moved
    pub fn set_observations(&mut self, v: ::protobuf::RepeatedField<super::observation::ObservationProto>) {
        self.observations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_observations(&mut self) -> &mut ::protobuf::RepeatedField<super::observation::ObservationProto> {
        &mut self.observations
    }

    // Take field
    pub fn take_observations(&mut self) -> ::protobuf::RepeatedField<super::observation::ObservationProto> {
        ::std::mem::replace(&mut self.observations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AgentInfoProto {
    fn is_initialized(&self) -> bool {
        for v in &self.observations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.reward = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.done = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.max_step_reached = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                11 => {
                    ::protobuf::rt::read_repeated_bool_into(wire_type, is, &mut self.action_mask)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.observations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.reward != 0. {
            my_size += 5;
        }
        if self.done != false {
            my_size += 2;
        }
        if self.max_step_reached != false {
            my_size += 2;
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(10, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += 2 * self.action_mask.len() as u32;
        for value in &self.observations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.reward != 0. {
            os.write_float(7, self.reward)?;
        }
        if self.done != false {
            os.write_bool(8, self.done)?;
        }
        if self.max_step_reached != false {
            os.write_bool(9, self.max_step_reached)?;
        }
        if self.id != 0 {
            os.write_int32(10, self.id)?;
        }
        for v in &self.action_mask {
            os.write_bool(11, *v)?;
        };
        for v in &self.observations {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AgentInfoProto {
        AgentInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "reward",
                |m: &AgentInfoProto| { &m.reward },
                |m: &mut AgentInfoProto| { &mut m.reward },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "done",
                |m: &AgentInfoProto| { &m.done },
                |m: &mut AgentInfoProto| { &mut m.done },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "max_step_reached",
                |m: &AgentInfoProto| { &m.max_step_reached },
                |m: &mut AgentInfoProto| { &mut m.max_step_reached },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &AgentInfoProto| { &m.id },
                |m: &mut AgentInfoProto| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "action_mask",
                |m: &AgentInfoProto| { &m.action_mask },
                |m: &mut AgentInfoProto| { &mut m.action_mask },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::observation::ObservationProto>>(
                "observations",
                |m: &AgentInfoProto| { &m.observations },
                |m: &mut AgentInfoProto| { &mut m.observations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AgentInfoProto>(
                "AgentInfoProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AgentInfoProto {
        static instance: ::protobuf::rt::LazyV2<AgentInfoProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AgentInfoProto::new)
    }
}

impl ::protobuf::Clear for AgentInfoProto {
    fn clear(&mut self) {
        self.reward = 0.;
        self.done = false;
        self.max_step_reached = false;
        self.id = 0;
        self.action_mask.clear();
        self.observations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AgentInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgentInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3mlagents_envs/communicator_objects/agent_info.proto\x12\x14communicat\
    or_objects\x1a4mlagents_envs/communicator_objects/observation.proto\"\
    \x8d\x02\n\x0eAgentInfoProto\x12\x16\n\x06reward\x18\x07\x20\x01(\x02R\
    \x06reward\x12\x12\n\x04done\x18\x08\x20\x01(\x08R\x04done\x12(\n\x10max\
    _step_reached\x18\t\x20\x01(\x08R\x0emaxStepReached\x12\x0e\n\x02id\x18\
    \n\x20\x01(\x05R\x02id\x12\x1f\n\x0baction_mask\x18\x0b\x20\x03(\x08R\na\
    ctionMask\x12J\n\x0cobservations\x18\r\x20\x03(\x0b2&.communicator_objec\
    ts.ObservationProtoR\x0cobservationsJ\x04\x08\x01\x10\x02J\x04\x08\x02\
    \x10\x03J\x04\x08\x03\x10\x04J\x04\x08\x04\x10\x05J\x04\x08\x05\x10\x06J\
    \x04\x08\x06\x10\x07J\x04\x08\x0c\x10\rB%\xaa\x02\"Unity.MLAgents.Commun\
    icatorObjectsJ\x83\t\n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\t\n\x02\x03\0\x12\x03\x02\0>\n\x08\n\x01\x08\x12\x03\x04\0?\n\t\
    \n\x02\x08%\x12\x03\x04\0?\n\x08\n\x01\x02\x12\x03\x05\0\x1d\n\n\n\x02\
    \x04\0\x12\x04\x07\0\x15\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x16\nG\
    \n\x03\x04\0\t\x12\x03\x08\x04\x0f\";\x20deprecated\x20repeated\x20float\
    \x20stacked_vector_observation\x20=\x201;\n\n\x0b\n\x04\x04\0\t\0\x12\
    \x03\x08\r\x0e\n\x0c\n\x05\x04\0\t\0\x01\x12\x03\x08\r\x0e\n\x0c\n\x05\
    \x04\0\t\0\x02\x12\x03\x08\r\x0e\n@\n\x03\x04\0\t\x12\x03\t\x04\x0f\"4\
    \x20deprecated\x20repeated\x20bytes\x20visual_observations\x20=\x202;\n\
    \n\x0b\n\x04\x04\0\t\x01\x12\x03\t\r\x0e\n\x0c\n\x05\x04\0\t\x01\x01\x12\
    \x03\t\r\x0e\n\x0c\n\x05\x04\0\t\x01\x02\x12\x03\t\r\x0e\n5\n\x03\x04\0\
    \t\x12\x03\n\x04\x0f\")\x20deprecated\x20string\x20text_observation\x20=\
    \x203;\n\n\x0b\n\x04\x04\0\t\x02\x12\x03\n\r\x0e\n\x0c\n\x05\x04\0\t\x02\
    \x01\x12\x03\n\r\x0e\n\x0c\n\x05\x04\0\t\x02\x02\x12\x03\n\r\x0e\n7\n\
    \x03\x04\0\t\x12\x03\x0b\x04\x0f\"+\x20repeated\x20float\x20stored_vecto\
    r_actions\x20=\x204;\n\n\x0b\n\x04\x04\0\t\x03\x12\x03\x0b\r\x0e\n\x0c\n\
    \x05\x04\0\t\x03\x01\x12\x03\x0b\r\x0e\n\x0c\n\x05\x04\0\t\x03\x02\x12\
    \x03\x0b\r\x0e\n8\n\x03\x04\0\t\x12\x03\x0c\x04\x0f\",\x20deprecated\x20\
    string\x20stored_text_actions\x20=\x205;\n\n\x0b\n\x04\x04\0\t\x04\x12\
    \x03\x0c\r\x0e\n\x0c\n\x05\x04\0\t\x04\x01\x12\x03\x0c\r\x0e\n\x0c\n\x05\
    \x04\0\t\x04\x02\x12\x03\x0c\r\x0e\n)\n\x03\x04\0\t\x12\x03\r\x04\x0f\"\
    \x1drepeated\x20float\x20memories\x20=\x206;\n\n\x0b\n\x04\x04\0\t\x05\
    \x12\x03\r\r\x0e\n\x0c\n\x05\x04\0\t\x05\x01\x12\x03\r\r\x0e\n\x0c\n\x05\
    \x04\0\t\x05\x02\x12\x03\r\r\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x04\
    \x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\x04\t\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x0e\n\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x13\x14\
    \n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\x04\x12\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x0f\x04\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\t\r\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\x10\x11\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x10\x04\x1e\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x10\x04\
    \x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x10\t\x19\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x10\x1c\x1d\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x11\
    \x04\x12\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x11\x04\t\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03\x11\n\x0c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\
    \x11\x0f\x11\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x12\x04#\n\x0c\n\x05\x04\
    \0\x02\x04\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\
    \x12\r\x11\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x12\x12\x1d\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\x12\x20\"\nH\n\x03\x04\0\t\x12\x03\x13\x04\
    \x10\"<\x20deprecated\x20CustomObservationProto\x20custom_observation\
    \x20=\x2012;\n\n\x0b\n\x04\x04\0\t\x06\x12\x03\x13\r\x0f\n\x0c\n\x05\x04\
    \0\t\x06\x01\x12\x03\x13\r\x0f\n\x0c\n\x05\x04\0\t\x06\x02\x12\x03\x13\r\
    \x0f\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x14\x040\n\x0c\n\x05\x04\0\x02\
    \x05\x04\x12\x03\x14\x04\x0c\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x14\r\
    \x1d\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x14\x1e*\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03\x14-/b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
